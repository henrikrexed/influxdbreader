receivers:
  # InfluxDB reader receiver
  influxdbreader:
    endpoint:
      address: "localhost:8086"
      protocol: "http"
      authentication:
        username: "admin"
        password: "password"
    database: "testdb"
    interval: "30s"
    auto_discover: true
    timeout: "30s"
    use_v2_api: false

  # OTLP receiver for receiving telemetry data
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']

  # File log receiver for reading log files
  filelog:
    include: [ "/var/log/*.log" ]
    start_at: end
    operators:
      - type: regex_parser
        regex: '^(?P<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (?P<severity>\w+) (?P<message>.*)$'

  # Kubernetes objects receiver
  k8sobjects:
    auth_type: serviceAccount
    objects:
      - name: pods
        mode: pull
        interval: 30s
      - name: services
        mode: pull
        interval: 30s

processors:
  # Batch processor for efficient processing
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 1500
    spike_limit_mib: 512

  # Resource processor to add resource attributes
  resource:
    attributes:
      - key: environment
        value: "production"
        action: upsert
      - key: service.name
        value: "influxdb-reader"
        action: upsert

  # Transform processor for data transformation
  transform:
    metric_statements:
      - context: metric
        statements:
          - set(attributes["transformed"], true)
          - set(description, "Transformed metric")

  # Filter processor to filter data
  filter:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - ".*cpu.*"
          - ".*memory.*"

exporters:
  # OTLP exporter for sending to OTLP endpoints
  otlp:
    endpoint: "localhost:4317"
    tls:
      insecure: true
    timeout: 30s

  # Debug exporter for development and debugging
  debug:
    verbosity: detailed

extensions:
  # Health check extension
  health_check:
    endpoint: "0.0.0.0:13133"

  # Pprof extension for profiling
  pprof:
    endpoint: "0.0.0.0:1777"

  # ZPages extension for debugging
  zpages:
    endpoint: "0.0.0.0:55679"

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Metrics pipeline with InfluxDB reader
    metrics/influxdb:
      receivers: [influxdbreader]
      processors: [memory_limiter, batch, resource, transform, filter]
      exporters: [otlp, debug]

    # Metrics pipeline with Prometheus
    metrics/prometheus:
      receivers: [prometheus]
      processors: [memory_limiter, batch, resource, filter]
      exporters: [otlp, debug]

    # Traces pipeline with OTLP
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, transform]
      exporters: [otlp, debug]

    # Logs pipeline with filelog
    logs:
      receivers: [filelog]
      processors: [memory_limiter, batch, resource, transform, filter]
      exporters: [otlp, debug]

    # Kubernetes objects pipeline
    metrics/k8s:
      receivers: [k8sobjects]
      processors: [memory_limiter, batch, resource]
      exporters: [otlp, debug]
